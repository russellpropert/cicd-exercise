{"version":3,"sources":["components/todo.js","components/form.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","todos","removeTodo","map","todo","i","className","id","onClick","text","useState","React","TodoForm","setTodos","value","setValue","onSubmit","e","preventDefault","newTodos","isCompleted","style","marginTop","color","htmlFor","type","placeholder","onChange","target","autoFocus","App","index","Number","temp","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAWeA,EAXF,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WACpB,OACE,mCACCD,EAAME,KACL,SAACC,EAAMC,GAAP,OACA,qBAAKC,UAAU,OAAeC,GAAIF,EAAGG,QAASN,EAA9C,SAA2DE,EAAKK,MAArCJ,SCJ1BK,EAAYC,IAAZD,SA8BQE,EA5BE,SAAC,GAAuB,IAAtBX,EAAqB,EAArBA,MAAOY,EAAc,EAAdA,SACxB,EAA0BH,EAAS,IAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAUA,OACE,uBAAMC,SATa,SAAAC,GAEnB,GADAA,EAAEC,iBACGJ,EAAL,CACA,IAAMK,EAAQ,sBAAOlB,GAAP,CAAc,CAACQ,KAAMK,EAAOM,aAAa,KACvDP,EAASM,GACTJ,EAAS,MAIT,UACE,uBAAOM,MAAO,CAACC,UAAW,OAAQC,MAAO,SAAUC,QAAQ,OAA3D,4BACA,uBACEC,KAAK,OACLlB,GAAG,OACHD,UAAU,QACVQ,MAAOA,EACPY,YAAY,eACZC,SAAU,SAAAV,GAAC,OAAIF,EAASE,EAAEW,OAAOd,QACjCe,WAAS,IAEX,wBAAQJ,KAAK,SAASJ,MAAO,CAACC,UAAW,QAAzC,wBCrBCZ,EAAYC,IAAZD,SAyCQoB,EAvCH,WACV,MAA0BpB,EACxB,CACE,CACED,KAAM,cACNW,aAAa,GAEf,CACEX,KAAM,uBACNW,aAAa,GAEf,CACEX,KAAM,iBACNW,aAAa,KAZnB,mBAAOnB,EAAP,KAAcY,EAAd,KAwBA,OACE,sBAAKP,UAAU,aAAf,UACE,4CACA,gGACA,sBAAKA,UAAU,MAAf,UACE,8BACE,cAAC,EAAD,CAAML,MAAOA,EAAOC,WAbT,SAAAe,GACjB,IAAMc,EAAQC,OAAOf,EAAEW,OAAOrB,IAC1B0B,EAAI,YAAOhC,GACfgC,EAAKC,OAAOH,EAAO,GACnBlB,EAASoB,QAWL,cAAC,EAAD,CAAUhC,MAAOA,EAAOY,SAAUA,WC5B3BsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3020f35f.chunk.js","sourcesContent":["const Todo = ({todos, removeTodo}) => {\n  return (\n    <>\n    {todos.map(\n      (todo, i) => \n      <div className=\"todo\" key={i} id={i} onClick={removeTodo}>{todo.text}</div>\n    )}\n    </>\n  );\n}\n\nexport default Todo;","import React from 'react';\nconst {useState} = React;\n\nconst TodoForm = ({todos, setTodos}) => {\n  const [value, setValue] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    const newTodos = [...todos, {text: value, isCompleted: false}];\n    setTodos(newTodos);\n    setValue('');\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label style={{marginTop: \"20px\", color: \"white\"}} htmlFor=\"todo\">Add to-do item</label>\n      <input\n        type=\"text\"\n        id=\"todo\"\n        className=\"input\"\n        value={value}\n        placeholder=\"Add Todo ...\"\n        onChange={e => setValue(e.target.value)}\n        autoFocus\n      />\n      <button type=\"submit\" style={{marginTop: \"20px\"}}>Submit</button>\n    </form>\n  );\n}\n\nexport default TodoForm;","// import logo from './logo.svg';\n// import './App.css';\nimport React from 'react';\nimport Todo from './components/todo.js'\nimport TodoForm from './components/form.js'\nconst {useState} = React;\n\nconst App = () => {\n  const [todos, setTodos] = useState(\n    [\n      {\n        text: 'learn react',\n        isCompleted: false,\n      },\n      {\n        text: 'watch olympic recaps',\n        isCompleted: false,\n      },\n      {\n        text: 'build todo app',\n        isCompleted: false,\n      },\n    ]\n  );\n\n  const removeTodo = e => {\n    const index = Number(e.target.id);\n    let temp = [...todos];\n    temp.splice(index, 1)\n    setTodos(temp);\n  }\n\n  return (\n    <div className=\"to-do-card\">\n      <h1>To-do List</h1>\n      <p>Enter a new list item below. Click on a list item to delete it.</p>\n      <div className=\"app\">\n        <div>\n          <Todo todos={todos} removeTodo={removeTodo} />\n        </div>\n        <TodoForm todos={todos} setTodos={setTodos} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}